sudo: false
env:
  - GHCVER=7.8.3 COVERAGE_SUITE=tests
  - GHCVER=7.8.3 COVERAGE_SUITE=psci-tests
  - GHCVER=7.6.3
  - GHCVER=7.10.1
before_install:
  - export PATH="/opt/ghc/$GHCVER/bin:$PATH"
  - export PATH="/opt/cabal/1.22/bin:$PATH"
  - export PATH="$HOME/.cabal/bin:$PATH"
  - export PATH="/opt/happy/1.19.5/bin:/$PATH"
  - export PATH="/opt/alex/3.1.4/bin:/$PATH"
install:
  - cabal --version
  - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
  - travis_retry cabal update
  - cabal sandbox init
  # Run with limited concurrency
  # Travis container infrastructure seems to expose all host CPUs (16?), thus
  # cabal and ghc tries to use them all. Which is bad idea on a shared box.
  # See also: https://ghc.haskell.org/trac/ghc/ticket/9221
  #
  # We probably want to be running with larger heap sizes when there are lots
  # of cores, to counteract the synchronization overhead of stop-the-world GC
  # across many cores. e.g. +RTS -A32m at least.
  - cabal install --only-dependencies --enable-tests -j2 --ghc-options='+RTS -A32m -RTS'
  - cabal install hpc-coveralls -j2
script:
  - ./travis/configure.sh
  - cabal build -j2 --ghc-options='+RTS -A32m -RTS'
  - cabal test
  - ./travis/test-install.sh
after_script:
  - ./travis/after.sh
notifications:
  email: true
before_deploy: "./bundle/build.sh linux64"
deploy:
  provider: releases
  api_key: $RELEASE_KEY
  file:
    - bundle/linux64.tar.gz
    - bundle/linux64.sha
  skip_cleanup: true
  on:
    all_branches: true
    tags: true
addons:
  apt:
    sources:
      - hvr-ghc
    packages:
      - cabal-install-1.22
      - ghc-7.6.3
      - ghc-7.8.3
      - ghc-7.10.1
      - happy-1.19.5
      - alex-3.1.4
cache:
  directories:
    - .cabal-sandbox
    - ../install-test/.cabal-sandbox
